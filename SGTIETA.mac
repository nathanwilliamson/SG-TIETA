#########################################################
# 
# SG-TIETA
# NH Williamson 7/28/2020

# This static gradient time incremented echo train acquisition (SG-TIETA) pulse sequence
# was used to collect data for  a paper submitted by Cai, Williamson, Witherspoon, Ravin, # and Basser to Physical Review Letter, Nov. 2020. Please cite accordingly.

# CPMG pulse sequence with each echo time incremented by a delay
# adapted for single-shot diffusion
# added taushift
# changed delay list to one which gets to longer delays faster [0,1,3,6,7,...]
#
# U.I. V3
#########################################################

procedure(SGTIETA, guipar)

   keaCtrl:checkVersion(2.15,1.1)

   n = :windowdefinition()

   windowvar(wv_dispMode,wv_ctrls,wv_shift,wv_other,wv_rel,
             wv_pp_list,wv_pp_name,wv_var,wv_tabs,wv_phase_list)

   wv_tabs  = ["Pulse Sequence","acquisition","processing+display","File settings"] # Tab names
   wv_ctrls = [2,24,25,48,49,78,79,99,100,109] # Control groups
   wv_shift = [-14,154,322,490,493] # Amount to shift control groups
   wv_other = [108,236,723]  # Collapse control and window size
   wv_saved = "false"

   (wv_rel,wv_var,wv_pp_list,wv_pp_name,wv_phase_list) = :getseqpar()

   if(nrArgs == 0)
      guipar = "show"
   endif

   keaCtrl:setUp(n,"SGTIETA",getmacropath(),guipar)
   if(guipar == "hide")
      return(n)
   elseif(guipar == "show")
      try; :initGUI(n); catch; endtry;
      showwindow(n)
      return(n)
   else
      setwindowpar(n,"type","dialog")
      guipar = showdialog(n)
      return(guipar)
   endif

endproc()

#########################################################
# 
# Returns important pulse sequence parameters
#
# rel ......... relationship between pulse sequence parameters
# var ......... variable which change during the pulse sequence
# pp_list ..... list of pulse sequence parameters sent to DSP
# pp_name ..... name of DSP pulse program to run
# phase_list .. phase cycling information
#
#########################################################

procedure(getseqpar)

   rel = ["a1 = 90Amplitude",
          "a2 = 180Amplitude",
          "d1 = pulseLength",
          "d2 = (echoTime-2)/2-d1-pgo-0.06-firstTauShift",
          "d3 = (echoTime-2)/2-acqTime*500-d1/2+rxLat+echoShift",
          "d4 = (echoTime-2)-d1-pgo-d3-0.13",
          "n1= nrEchoes",
          "n2 = nrPnts",
          "t5=(ted*[0,1,2,4,3,7,5,6,9,11,10,14,12,8,13,20,15,18,16,17,22,25,19,23,21,26,27,29,24,28,30,31,36,34,33,32,35,40,45,43,42,37,39,49,41,38,47,46,44,53,50,52,51,60,48,54,63,57,65,55,62,58,59,61,56,64,67,72,68,66,74,69,71,77,81,76,73,70,75,82,85,90,78,79,84,91,86,80,83,92,89,100,95,94,87,88,93,96,99,104,105]+1)*50-1",
          "totPnts = nrPnts*nrEchoes",
          "totTime = nrEchoes*echoTime+nrEchoes*(nrEchoes/2+1)*ted"]
   var = [""]
   pp_list = ["t5","a1","p1","d1","d2","n1","l1","a2","p2","d3","n2","d4"]
   pp_name = "SGTIETA.p"
   phase_list = [0,2;1,1;0,2]

endproc(rel,var,pp_list,pp_name,phase_list)


#########################################################
# 
# Provide an interface to this macro which does not
# require the use of the window interface
#
# User must supply a list of parameter (see help file)
# and the pulse program name if different from 
# "$macro$_ext.p"
#
#########################################################

procedure(backdoor, guipar)

   keaCtrl:checkVersion(2.15,1.1)

   (rel,var,pp_list,pp_name,phase_list) = :getseqpar()
  
   (guipar,ppList,pcList,pcIndex,varList) = keaCtrl:initialisePP(getmacropath(),getmacroname(),guipar,rel,var,pp_list,pp_name,phase_list)
   
   r = keaCtrl:runBDPP(guipar,ppList,pcList,pcIndex,varList)

endproc(r)

#########################################################
# 
# Define the window gui
#
#########################################################

procedure(windowdefinition)

   # Automatically generated window definition procedure.
   # Any code added manually will be removed if layout modified interactively
   n = window("Single shot diffusion version 1.5", -1, -1, 586, 720)

      # Define all controls with basic parameters
      getmessage(0,
        keaCtrl:processMessage();)
      tab(1, 6, 7, 568, 224,
         which = getpar(0,1,"currenttab");
         if(which == 2);
         fn = findobj(0,"name","filter");
         keaCtrl:enableControls(fn+1,fn+3,fn);
         fn = findobj(0,"name","fitType");
         keaCtrl:enableControls(fn+1,fn+8,fn,3);
         endif();)
      groupbox(2, "Pulse sequence", 9, 9, 560, 161)
      statictext(3, 135, 27, "center", "B1 Frequency (MHz)")
      textbox(4, 112, 42, 46)
      statictext(5, 135, 67, "center", "Repetition time (ms)")
      textbox(6, 112, 82, 46)
      statictext(7, 290, 35, "right", "90 amplitude (dB)")
      textbox(8, 296, 31, 40)
      statictext(9, 290, 61, "right", "180 amplitude (dB)")
      textbox(10, 296, 57, 40)
      statictext(11, 290, 87, "right", "Pulse length (us)")
      textbox(12, 296, 83, 40)
      statictext(13, 290, 139, "right", "echo offset (us)")
      textbox(14, 296, 135, 40)
      statictext(15, 445, 35, "right", "Echotime (us)")
      textbox(16, 451, 31, 40)
      statictext(17, 445, 61, "right", "Number of echoes")
      textbox(18, 451, 57, 40)
      statictext(19, 445, 87, "right", "Echo shift (us)")
      textbox(20, 451, 83, 40)
      statictext(21, 445, 113, "right", "first tau shift")
      textbox(22, 451, 109, 40)
      statictext(23, 445, 139, "right", "Auto-phase")
      checkbox(24, 451, 139, "no,yes", "no")
      groupbox(25, "Acquisition", 9, 177, 560, 161)
      statictext(26, 83, 212, "center", "Rx Gain (dB)")
      textmenu(27, 66, 230, 39, 200)
      statictext(28, 83, 261, "center", "Rx Phase (degrees)")
      textbox(29, 66, 277, 39)
      statictext(30, 191, 214, "center", "Number of")
      statictext(31, 191, 227, "center", "complex points")
      textmenu(32, 238, 216, 62, 200,
         keaCtrl:updateAcqTime();)
      statictext(33, 191, 246, "center", "Dwell time")
      statictext(34, 191, 259, "center", "(us)")
      textmenu(35, 238, 249, 62, 200,
         keaCtrl:updateFilters();)
      statictext(36, 191, 280, "center", "Number of")
      statictext(37, 191, 293, "center", "scans")
      textbox(38, 238, 281, 62)
      statictext(39, 365, 228, "center", "Flat filter")
      checkbox(40, 401, 229, "no,yes", "no",
           keaCtrl:setDwellTimeMenu();
           keaCtrl:updateFilters();)
      statictext(41, 365, 252, "center", "Accumulate")
      checkbox(42, 401, 253, "no,yes", "no")
      statictext(43, 365, 276, "center", "Phase cycle")
      checkbox(44, 401, 278, "no,yes", "yes")
      statictext(45, 493, 212, "center", "Spectral width (kHz)")
      textbox(46, 464, 226, 56)
      statictext(47, 493, 263, "center", "Acquisition time (ms)")
      textbox(48, 464, 277, 56)
      groupbox(49, "Laplace_CPMG", 9, 345, 560, 161)
      groupbox(50, "", 18, 368, 166, 119)
      statictext(51, 131, 389, "right", "Filter time domain")
      checkbox(52, 139, 390, "no,yes", "no",
           fn = findobj(0,"name","filter");
           keaCtrl:enableControls(fn+1,fn+3,fn);)
      statictext(53, 48, 420, "right", "Filter")
      textmenu(54, 55, 416, 85, 200)
      button(55, 150, 416, 22, 22, "...",
         filters();)
      statictext(56, 131, 452, "right", "Time magnitude")
      checkbox(57, 139, 453, "no,yes", "no")
      groupbox(58, "", 190, 368, 97, 119)
      statictext(59, 227, 394, "center", "Sum echoes")
      checkbox(60, 263, 394, "no,yes", "no")
      statictext(61, 230, 423, "center", "Autophase")
      checkbox(62, 263, 424, "no,yes", "no")
      statictext(63, 231, 452, "center", "Normalize")
      checkbox(64, 263, 454, "no,yes", "no")
      groupbox(65, "", 292, 368, 125, 119)
      statictext(66, 388, 395, "right", "Exponential fit")
      statictext(67, 388, 413, "right", "Bi-exponential fit")
      statictext(68, 388, 431, "right", "Inverse-Laplace fit")
      statictext(69, 388, 449, "right", "No fit")
      radiobuttons(70, 393, 397, 18, "vertical", "exp,biexp,nnls,none", "exp",
           fn = findobj(0,"name","fitType");
           keaCtrl:enableControls(fn+1,fn+8,fn,3);)
      groupbox(71, "", 423, 368, 137, 119)
      statictext(72, 494, 383, "center", "Relaxation range (ms)")
      statictext(73, 482, 409, "right", "Minimum")
      textbox(74, 489, 404, 43)
      statictext(75, 482, 431, "right", "Maximum")
      textbox(76, 489, 427, 43)
      statictext(77, 482, 458, "right", "Alpha")
      textbox(78, 489, 456, 44)
      groupbox(79, "File_Settings", 9, 513, 560, 161)
      statictext(80, 86, 567, "right", "Working")
      statictext(81, 86, 580, "right", "directory")
      textbox(82, 102, 568, 215)
      button(83, 322, 568, 22, 22, "...",
         keaFiles:setWorkingDir();)
      statictext(84, 93, 604, "right", "Experiment")
      statictext(85, 78, 617, "right", "name")
      textbox(86, 102, 607, 105)
      button(87, 213, 607, 22, 22, "...",
         keaFiles:setExpName();)
      statictext(88, 315, 604, "right", "Experiment")
      statictext(89, 305, 617, "right", "number")
      textbox(90, 323, 607, 25)
      button(91, 353, 607, 22, 22, "...",
         keaFiles:setExpNr();)
      statictext(92, 377, 566, "center", "Save")
      statictext(93, 377, 579, "center", "data")
      checkbox(94, 405, 573, "false,true", "true")
      statictext(95, 421, 604, "center", "Auto")
      statictext(96, 421, 617, "center", "increment")
      checkbox(97, 456, 612, "no,yes", "no")
      button(98, 442, 561, 40, 36, "Load Data",
         keaFiles:loadData();)
      button(99, 497, 561, 40, 50, "Open data folder",
         keaFiles:openDataFolder();)
      colorbox(100, 24, 687, 10, 10, [255,255,255,255])
      colorbox(101, 24, 700, 10, 10, [255,255,255,255])
      button(102, 44, 684, 54, 29, "Run",
         (wv_rel,wv_var,wv_pp_list,wv_pp_name,wv_phase_list) = :getseqpar();
         keaCtrl:runPP(getmacropath(),wv_pp_name);)
      button(103, 109, 684, 54, 29, "Abort",
         setwindowpar(0,"title","Wait for macro to abort ...");
         wvExpStatus = "stop";)
      button(104, 174, 684, 54, 29, "Finish",
         setwindowpar(0,"title","Wait for phase-cycling to complete ...");
         wvExpStatus = "finish";)
      button(105, 239, 684, 54, 29, "Load Par.",
         keaFiles:loadParameters();)
      button(106, 304, 684, 54, 29, "Help",
         help("Macros\NMR-Mouse","SGTIETA.htm");)
      button(107, 369, 684, 54, 29, "Kea Pref.",
         keaCtrl:showPreferences();)
      button(108, 434, 684, 54, 29, "Collapse",
         keaCtrl:toggleWindowSize(1);)
      button(109, 499, 684, 54, 29, "Close",
         guipar = getctrlvalues(0);
         if(getwindowpar(0,"type") == "dialog");
         guipar = keaFiles:addWindowSpecifics(guipar);
         keaFiles:saveCommonPar(guipar);
         closedialog(guipar);
         else;
         keaFiles:saveParameters();
         closewindow(0);
         endif;)
      menu(110, "bkgMenu", "Edit macro\tCtrl+Dbl-Click", edit("$getmacroname()$"),
                "Show compiler\tCtrl+Shift+Dbl-Click", MakePulseProgram("$getmacropath()$","$rmext(getmacroname())$"))

     # Set other control parameters
      setpar(n,1,"active","true",
                  "inittabs",[""])
      setpar(n,4,"valueID","b1Freq",
                  "tag","freqRange",
                  "type","double",
                  "range",[1,400])
      setpar(n,6,"valueID","repTime",
                  "type","float",
                  "range",[20,1e+008])
      setpar(n,8,"valueID","90Amplitude",
                  "type","float",
                  "range",[-85,0])
      setpar(n,10,"valueID","180Amplitude",
                  "type","float",
                  "range",[-85,0])
      setpar(n,12,"valueID","pulseLength",
                  "type","float",
                  "range",[1,500])
      setpar(n,14,"valueID","ted",
                  "type","float",
                  "range",[0.25,500])
      setpar(n,16,"valueID","echoTime",
                  "type","float",
                  "range",[2,327670])
      setpar(n,18,"valueID","nrEchoes",
                  "type","integer",
                  "range",[1,8192])
      setpar(n,20,"valueID","echoShift",
                  "type","float",
                  "range",[-20,20])
      setpar(n,22,"valueID","firstTauShift",
                  "type","float",
                  "range",[-20,20])
      setpar(n,24,"valueID","autoPhase")
      setpar(n,27,"valueID","rxGain",
                  "type","integer",
                  "tooltip","20-40 dB gives optimal SNR.\rDecrease if overload occurs.",
                  "range",[-20,70],
                  "menu",["-20","-17","-14","-11","-8","-5","-2","1","4","7","10","13","16","19","22","25","28","31","34","37","40","43","46","49","52","55","58","61","64","67","70"])
      setpar(n,29,"valueID","rxPhase",
                  "type","float",
                  "tooltip","Applies a fixed phase shift to collected data.\rIgnored if autophasing.")
      setpar(n,32,"valueID","nrPnts",
                  "type","integer",
                  "range",[2,65536],
                  "menu",["2","4","8","16","32","64","128","256","512","1024","2048","4096","8192","16384","32768","65536"])
      setpar(n,35,"valueID","dwellTime",
                  "type","float",
                  "menu",[""])
      setpar(n,38,"valueID","nrScans",
                  "type","integer",
                  "range",[1,1e+006])
      setpar(n,40,"valueID","flatFilter",
                  "tooltip","On: all frequencies equally weighted.\rOff: center frequencies enhanced.")
      setpar(n,42,"valueID","accumulate")
      setpar(n,44,"valueID","usePhaseCycle")
      setpar(n,46,"valueID","bandwidth",
                  "tag","disable")
      setpar(n,48,"valueID","acqTime",
                  "tag","disable")
      setpar(n,52,"valueID","filter")
      setpar(n,54,"valueID","filterType",
                  "menu",[""])
      setpar(n,57,"valueID","timeMag")
      setpar(n,60,"valueID","sumEchoes")
      setpar(n,62,"valueID","autoPhase")
      setpar(n,64,"valueID","normalize")
      setpar(n,70,"valueID","fitType")
      setpar(n,74,"valueID","x_minimum")
      setpar(n,76,"valueID","x_maximum")
      setpar(n,78,"valueID","alpha")
      setpar(n,82,"valueID","dataDirectory",
                  "type","string",
                  "tooltip","Where experimental data will be stored.")
      setpar(n,86,"valueID","expName",
                  "type","string",
                  "tooltip","A subdirectory of the data working directory to store different experiments.")
      setpar(n,90,"valueID","expNr",
                  "tooltip","A numbered subdirectory below the experiment name.\rNot made if entry is blank.")
      setpar(n,94,"valueID","saveData")
      setpar(n,97,"valueID","incExpNr",
                  "tooltip","Increment the experiment number after each experiment.")
      setpar(n,98,"tooltip","Load and display the data specified in the directories fields")
      setpar(n,99,"tooltip","View the data directory in Windows Explorer.")
      setpar(n,100,"objID","ppStatus",
                  "tooltip","Experiment Status Indicator\rGreen: running\rBlue: processing\rYellow: waiting")
      setpar(n,101,"objID","rxOverflow",
                  "tooltip","Receiver Overflow Indicator\rRed: overflow")
      setpar(n,102,"valueID","run",
                  "tooltip","Start the experiment.")
      setpar(n,103,"valueID","stop",
                  "tooltip","Stop the experiment without saving data.",
                  "active","true")
      setpar(n,104,"valueID","finish",
                  "tooltip","Finish the current phase cycle and save data.",
                  "active","true")
      setpar(n,105,"valueID","load",
                  "tooltip","Load a parameter set for a similar experiment.")
      setpar(n,106,"valueID","help",
                  "tooltip","Display HTML help for this experiment.",
                  "active","true")
      setpar(n,107,"valueID","showPref",
                  "tooltip","Display a preferences dialog for the Kea spectrometer.")
      setpar(n,108,"valueID","size",
                  "tooltip","Expand or collapse the window size to show all or fewer controls.",
                  "active","true")
      setpar(n,109,"valueID","close",
                  "tooltip","Close the window saving all parameters.")

     # Set other window parameters
      setwindowpar(n,"bkgmenu",110)

endproc(n)

#######################################################
# Execute the pulse program, collecting nrScans of 
# data and displaying the result in the 1D plot. 
#
# This procedure can be modified to perform more
# complex functions using the passed parameters:
#
# guipar ..... all parameters from the user interface
# ppList ..... the pulse program parameter list
# pcList ..... phase-cycle list
# pcIndex .... indices of phase parameters in ppList
# varIndex ... indices of variable parameters in ppList
#
#######################################################

procedure(execpp,guipar,ppList,pcList,pcIndex,varIndex)

# Make all gui parameters available
   assignlist(guipar)

   if(d1<1|d2<1|d3<1);  
      message("Error","Pulse sequence timing error!","error")
      return(0)
   endif
      if(d4-keaNMR:getAcqTime(guipar) < 1)
      message("Error","Pulse sequence timing error!\rReduce acquisition time or increase echotime.","error")
      return(0)
   endif

# Check for total RF duty cycle
  if(pulseLength*nrEchoes/repTime>160) #1.6 normally
    message("Error","RF duty cycle is too high, reduce nrEchoes or increase repTime","error") 
    return(0)
  endif


# Check for p.s. duty cycle should be < 20%
  if(d1/(echoTime) > 0.25)
      message("Error","Duty cycle is too high in pulse sequence!\rshould be < 25%\rIncrease echo time\ror reduce pulse length.","error")
       return(0)
   endif

# Check for too much data
   if(nrEchoes*nrPnts > 128*1024)
      message("Error","Out of DSP memory!\rReduce number of points per echo\ror number of echoes.","error")
       return(0)
   endif

# Calculate a suitable time axis
   t = [0:1:nrPnts-1]/(nrPnts)*acqTime
   f = ([0:1:nrPnts-1]-nrPnts/2+1)/acqTime
   totalTime = ([0:1:totPnts-1]/totPnts)*totTime + echoTime
   

# Allocate data for outputs
   echoData = cmatrix(totPnts)
   echoData2D = cmatrix(nrPnts,nrEchoes)
   ampArray   = matrix(nrEchoes)
   tauArray   = matrix(nrEchoes)
   echoSum    = cmatrix(nrPnts)
   fltTot     = matrix(nrPnts,nrEchoes)
# Filter
   if(filter == "yes")
      flt = filters:get_filter(filterType,"FTEcho",nrPnts)
      for(ec = 0 to nrEchoes-1)
         fltTot[~,ec] = flt
      next(ec)
      fltTot = reshape(fltTot,totPnts,1)
   else
      flt = matrix(nrPnts)+1
      fltTot = matrix(totPnts)+1
   endif
#  subplots
   if(fitType == "nnls")
      (prt,pri,prn) = wvPP->multiplot(3,1)
   else
      (prt,pri) = wvPP->multiplot(2,1)
       prn = null
   endif


# Reset the timer
   time(0)  

# Accumulate scan
   for(scan = 0 to nrScans-1)

    # Note the time at scan start
      t1 = time()   

    # Set phases for this scan
      (ppList,pAcq) = keaRun:setPPPhase(ppList,scan,pcList,pcIndex)
   
    # Send phase parameters to DSP
      dspwrite("x",0x00,ppList,wvPort)

    # Collect the data
      (status,data) = keaRun:getData(totPnts,guipar)
      if(status != "ok")
         return(0)
      endif


    # Accumlate the data
      echoData = keaRun:accumulate(accumulate,pAcq,echoData,data)

    # Extract the echoes 
      for(ec = 0 to nrEchoes-1)
            echoData2D[~,ec] = flt.*echoData[ec*nrPnts:(ec+1)*nrPnts-1]/(scan+1)
      next(ec)


   # Autophase first echo if desired
      if(autoPhase == "yes")
        ph = keaRun:autoPhase(echoData,"maxreal")
        ph = ph*pi/180
      else
         ph = 0
      endif

   # Integrate each echo
      for(ec = 0 to nrEchoes-1)
         ampArray[ec]   = sum(real(echoData2D[~,ec]*exp(i*ph)))/(nrPnts)
         tauArray[ec]   = echoTime*(ec+1)
      next(ec)

    # Display full time domain data
         if(sumEchoes == "no") 
            if(nrEchoes == 1)
               keaPlot:graphTime(prt,t*1000,echoData.*fltTot*exp(i*ph),scan,guipar,
                                 "CPMG echo (scan: $scan+1$/$nrScans$)","Acquisition time (\G(m)s)")
            else
               keaPlot:graphTime(prt,totalTime/1000,echoData.*fltTot*exp(i*ph),scan,guipar,
                                 "Raw CPMG echoes (scan: $scan+1$/$nrScans$)","Echo centre time (ms)")
            endif
      # Display all echoes added together
         else 
            for(col = 0 to nrPnts-1)
               echoSum[col] = sum(echoData2D[col,~]')*exp(i*ph)
            next(ec)
            keaPlot:graphTime(prt,
                              t*1000,echoSum,scan,guipar,
                              "CPMG echo sum (scan: $scan+1$/$nrScans$)","Acquisition time (\G(m)s)")
         endif
   
      # Plot the integrals
         if(fitType == "none") # Just display integrals
            guipar = guipar + ["lineMode = \"none\""]
            keaPlot:graphXY(pri,tauArray/1000,ampArray,null,nrEchoes,
                           "Time (ms)","Average echo amplitude (UNITS)",
                           "Echo attenuation data",guipar)
            result = ""
         else # Display integrals with fit after full phase cycle.
            if(scan > 0 & ((scan+1) % size(pcList) == 0)) 
               result = :DisplayFit(pri,prn,tauArray,ampArray,nrEchoes,guipar)
            endif
         endif
   
      
   # Check timing
     check = keaRun:checkTimeAndAbort(guipar,t1,scan,pcList,"ignoreLastScan")
     if(check == "abort")
        return(0)
     elseif(check == "finish")
        scan = scan + 1
        exitfor()
     endif


   next(scan)

   # Print result
   if(result != "")
     pr("$result$")
   endif

# Update Rx Phase textbox in GUI
   if(autoPhase == "yes")
      try
         n = findobj(0,"name","rxPhase")
         phOld = getpar(0,n,"value")
         phNew = ((ph*180/pi)+phOld)%360
         setpar(0,n,"text",phNew)
      catch
      endtry
   endif

# Phase the raw echo data
   if(autoPhase == "yes")
      for(ec = 0 to nrEchoes-1)
         echoData2D[~,ec] = echoData2D[~,ec]*exp(i*ph)
      next(ec)
   endif

# Display echo data as 2D plot
 #  :display2DData(echoData2D/nrScans,guipar)

# Save the data
   keaFiles:save1DData(guipar,tauArray,ampArray)
   keaFiles:save2DData(guipar,echoData2D)
   keaFiles:incrementExperiment(guipar)

# Return the data
   result = struct()
   result->tau = tauArray
   result->int = ampArray/nrScans
   result->rawTau = totalTime # ms
   result->rawAmp = 1000*echoData*exp(i*ph)/nrScans # uV

# Return result structure when called from backdoor
   return(result)

endproc("execpp")


###################################################################
#
# Display time domain data in the 2D plot
#
# Parameters are:
# echoData2D ... the data to display
# guipar ....... the window parameters
#
###################################################################
 
procedure(display2DData,echoData2D,guipar)

   assignlist(guipar)

   tmax = acqTime*1000 

   pd = wvPP2->subplot(1,1)

pr (dummyEchoes+1)*nrEchoes*echoTime
   pd->draw("false")
      pd->image(echoData2D,[0,tmax],[0,(dummyEchoes+1)*nrEchoes*echoTime])
      pd->title("CPMG echoes (complex)")
      pd->ylabel("echo time (\G(m)s)")
      pd->xlabel("Acquisition time (\G(m)s)")
   pd->draw("true")

endproc()

###################################################################
#
# Display the passed data points and a fitted t2 curve
#
# Parameters are:
# x ........ the time array
# y ........ the amplitude arrays
# N ........ the number of data points to plot
# guipar ... GUI parameter list
#
###################################################################
 

procedure(DisplayFit,pri,prn,x,y,N,guipar)

  assignlist(guipar)

   if(fitType == "nnls")
      result = :ILFit(pri,prn,x/1000,y,N,guipar)
   else
      result = keaPlot:fitAndGraph(pri,x/1000,y,N,fitType,null,
                          "Time (ms)","Echo integral (UNITS)",
                          "Echo attenuation data",
                          "Fit result: RESULT",guipar)
  endif

endproc(result)


###################################################################
#
# Display the passed data points and a fitted relaxation curve
# and relaxation spectrum
#
# Parameters are:
# x ....... the time array
# y ....... the amplitude arrays
# N ....... the number of data points to plot
# guipar ... GUI parameter list
#
###################################################################
 
procedure(ILFit,pri,prn,x,y,N,guipar)

   assignlist(guipar)

   if(N > 100)
     x_steps = 100    
     timeDat = interp(x,100)
     yData = interp(y,100)
   else
     timeDat = x
     yData   = y
     x_steps = N-1
   endif

   guipar = guipar + ["exp_type = \"relaxation\"",
                      "beta = -1",
                      "x_steps = $x_steps$"]

   (spectrum,chisq,count,tau) = nnls1d:backdoor(timeDat,yData,guipar,0)

   fit = nnls1d:calcFitT2(tau,spectrum,x,y)

   keaPlot:graphXYFit(pri,x,y,fit,null,size(x),
                      "Time (ms)","Average echo amplitude (UNITS)","Echo attenuation data (with IL fit)",guipar)

   guipar = guipar + ["xMap = \"log\"",
                      "traceCol = $wvSpectrumColor$",
                      "symbolShape = \"none\""]

   keaPlot:graphXY(prn,tau,spectrum,null,size(tau),
                      "log_(10)(T) ms","Amplitude","Relaxation Spectrum",guipar)

endproc("")
